# -*- coding: utf-8 -*-
"""python_dsa2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OLIudXhd9cjnLrIwlBw4FUxhut-PqxSG
"""

n = "numaan"
b = "naamun"

n[0:4]

max(b)

n == b

a = range(0,10)

b = range(10,100)

b[0:7]

range(10,100)+9

max(b)

a == b

#1. strings are ordered
#2. strings are immutable
#3. used with any operators
#4. used with some builtin functions ex: min, max, len
#5. can do slicing, indexing

# 1. range is ordered
# 2. range is immutable
# 3. used with some builtins ex: min,max, len
# 4. wont support *,+ operators
# 5. can do slicing, indexing

# 1. lists are ordered
# 2. lists are mutable
# 3. duplicate values are allowed
# 4. elements can 
# 3. dynamic (can modify as per our needs)
# 4. used with +,* operators
# 5. can do slicing, indexing

# 1. Tuples are ordered
# 2. tuples are immutable
# 3. Duplicate values are allowed
# 4. can do slicing, indexing\
# 5. used with +,* operators

print(hash(2))

''' 1. dictionaries are unordered
    2. |In dictionaries keys are immutable, hashable, values are mutable
    3. keys can't be duplicated, but values can have duplicates
    4. keys are case sensitive, should be unique
    5. dictionaries are dynamic



a = "Naruto"

if "b" in a:
  print("characters are overlapping")
else:
  print("characters are not overlapping")  # in --> membership operators

list1 = [1,2,3,5]
list2 = [7,8,9,10]

if list2[1] in list1:
  print(" i found the number")
else:
  print("i didn't find any numbers matching.")

if list2[1] not in list1:
  print(" yes i know it doesn't have the number")
else:
  print("sorry. i fond the number")

if list2[3] not in list1:
  print(" yes i know it doesn't have the number")
else:
  print("sorry. i fond the number")

a = []
b = []
if a == b:
  print("both are equal")
else:
  print("both are not equal")

if a is b:
  print("both are the one single variable")
else:
  print("both are two different variables")

if a is not b:
  print("both are different variables")
else:
  print("botha are single variables")

list1 = [1,2,6,4,78] #list are having some kind of order when assigning
list2 = [78,4,6,2,1]

if list1 == list2:
  print("they both have something in common")
else:
  print(" they both don't have anything in common")

a = -1
b = 40
if a> 0 and b>0:
  print("both are greater numbers")
else:
  print("both are lesser numbers")

a = 9                #or ----> either this or that
b = -9
if a>0 or b>0:
  print("At least one variable is greater than 0")
else:
  print("both the variables are lesser than 0")

# not
a = 99
if not a:
  print("false")
else:
  print("True")

mydict1 = {'1': 'Naruto',
           '2': 'Itachi',
           '3': 'Madara'}

mydict1['1']

a = {}
print(type(a))

a['1'] = 'DATA SCIENCE'
a['2'] = 'MACHINE LEARNING'
a['3'] = 'ARTIFICIAL INTELLIGENCE'
a['4'] = 'NARUTO UZUMAKI'

print(a)

print(type(a))

print('1' in a)

print('NAME' in a)

print('samsung' in a)

print(len(a))

print(max(a))

print(min(a))

a.clear()

a

a['1'] = 'DATA SCIENCE'
a['2'] = 'MACHINE LEARNING'
a['3'] = 'ARTIFICIAL INTELLIGENCE'
a['4'] = 'NARUTO UZUMAKI'

a

print(a.get('3'))

print(a.items())

print(a.keys())

print(a.values())

a

print(a.pop('4'))

a

print(a.popitem())

a

b = {'3': 'COMPUTER VISION', '4': 'NATURAL LANGUAGE PROCESSING'}

print(a.update(b))

a

a = set(['python', 'java', 'ruby', 'scala'])
print(type(a))

len(a)

print('NARUTO' in a)

print('python' in a)

a

print(a) # sets are unordered.

print(a.update('1'))

a

b = set([1,2,3])

a.update(b)

a

x1 = {'apple', 'banana'}
x2 = {'tablets','tonics'}

x3 = x1 | x2

x3

print(x1.union(x2))

a1 = {'python','java','scala','ruby'}
a2 = {'python','data','science','ml'}

a3 = a1|a2  # pipe symbol represents here all the unique items between the given variables
a3

print(a1.union(a2))

a1

print(a1.intersection(a2))  # means finding the common thing between the variables

print(a1.difference(a2))   #it takes all the elements except the common element of a1

a1

a2

print(a1.symmetric_difference(a2)) #it removes the common elements from a1 and a2 and prints out all the remaining elements

print(a1.issubset(a2))

x1 = {'python','ruby','julia'}
x2 = {'python','ruby'}

print(x2.issubset(x1))

print(x1.issubset(x2))

x = frozenset(['data','science','and', 'ml'])
print(type(x))

print(x)

a1 = set(['data'])
a2 = set(['science'])
a3 = set(['ml'])
x = {a1,a2,a3}

a1 = frozenset(['data'])
a2 = frozenset(['science'])
a3 = frozenset(['ml'])
x = {a1,a2,a3}

x



"""in the previous example above, we created a set x of frozensets (a1,a2,a3) which is possible because the 
frozensets are immutable
"""

